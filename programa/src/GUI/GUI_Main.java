
package GUI;

import ParserLexer.LexerCup;
import ParserLexer.sym;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class GUI_Main extends javax.swing.JFrame {

    /**
     * Creates new form GUI_Main
     */
    public GUI_Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPAnalizadorLexico = new javax.swing.JPanel();
        JBCargar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTATextoArea = new javax.swing.JTextArea();
        JBGenerarAnalisis = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        JTATextoArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JPAnalizadorLexico.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Analizador Léxico", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        JBCargar.setText("Cargar Archivo");
        JBCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCargarActionPerformed(evt);
            }
        });

        JTATextoArea.setColumns(20);
        JTATextoArea.setRows(5);
        jScrollPane1.setViewportView(JTATextoArea);

        JBGenerarAnalisis.setText("Generar Análisis");
        JBGenerarAnalisis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBGenerarAnalisisActionPerformed(evt);
            }
        });

        JTATextoArea1.setEditable(false);
        JTATextoArea1.setColumns(20);
        JTATextoArea1.setRows(5);
        jScrollPane2.setViewportView(JTATextoArea1);

        jButton1.setText("Guardar Análisis");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPAnalizadorLexicoLayout = new javax.swing.GroupLayout(JPAnalizadorLexico);
        JPAnalizadorLexico.setLayout(JPAnalizadorLexicoLayout);
        JPAnalizadorLexicoLayout.setHorizontalGroup(
            JPAnalizadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPAnalizadorLexicoLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(JPAnalizadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBCargar))
                .addGap(40, 40, 40)
                .addGroup(JPAnalizadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JPAnalizadorLexicoLayout.createSequentialGroup()
                        .addComponent(JBGenerarAnalisis)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        JPAnalizadorLexicoLayout.setVerticalGroup(
            JPAnalizadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPAnalizadorLexicoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPAnalizadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(JPAnalizadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(JBCargar)
                        .addComponent(JBGenerarAnalisis, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(JPAnalizadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(JPAnalizadorLexico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(JPAnalizadorLexico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBGenerarAnalisisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBGenerarAnalisisActionPerformed
        try {
            analizadorLexico();
        } catch (Exception e) {
            Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_JBGenerarAnalisisActionPerformed

    private void JBCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBCargarActionPerformed
       JFileChooser chooser = new JFileChooser();
       chooser.showOpenDialog(null);
       File archivo = new File(chooser.getSelectedFile().getAbsolutePath());
       
       try {
           String ST = new String(Files.readAllBytes(archivo.toPath()));
           JTATextoArea.setText(ST);
       } catch (FileNotFoundException ex){
            Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);           
       } catch (IOException ex) {
            Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_JBCargarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        guardarEnArchivo(JTATextoArea1.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBCargar;
    private javax.swing.JButton JBGenerarAnalisis;
    private javax.swing.JPanel JPAnalizadorLexico;
    private javax.swing.JTextArea JTATextoArea;
    private javax.swing.JTextArea JTATextoArea1;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void analizadorLexico() {
       int contLinea = 1;
       int contColumna = 1;
       int lexemaLength = 0;
       boolean continuaError = false;
        // Obtiene el texto de entrada desde JTATextoArea
        String expr = JTATextoArea.getText(); 
        LexerCup lexerCup = new LexerCup(new StringReader(expr));
        
        // Variables para definir el ancho de las columnas
        int anchoColumna1 = 25;
        int anchoColumna2 = 35;
        int anchoColumna3 = 35;

        // Formato dinámico
        String formato = String.format("%%-%ds %%-%ds %%%ds%%n", anchoColumna1, anchoColumna2, anchoColumna3);

        // StringBuilder para construir el texto
        StringBuilder sb = new StringBuilder();
        
        // Linea de Titulos
        sb.append(String.format(formato, "LINEA / COLUMNA ", "SIMBOLO", "LEXEMA"));
        
        // Primera Linea
        sb.append(String.format(formato, "Linea " + contLinea , "", ""));
        try {
            while (true) {
                //Tokens token = lexer.yylex();
                Symbol symbol = lexerCup.next_token();
                if (symbol == null) {
                    // Guardar el resultado en un archivo             
                    JTATextoArea1.setText(sb.toString());
                    return;
                }
                //Registrar longitud de la cadena de caracteres del lexema para calcular la columna
                lexemaLength = symbol.value.toString().length();
                
                //Flag para registrar error solo una vez
                if(continuaError && symbol.sym != sym.Error){
                    continuaError = false;
                }
                switch (symbol.sym) {
                    case sym.Linea:
                        contLinea++;
                        contColumna = 0;
                        sb.append(String.format(formato, "Linea " + contLinea , "", ""));
                        break;
                    case sym.AperturaBloque:
                        sb.append(String.format(formato, "Columna " + contColumna , "<Apertura de Bloque>" , symbol.value ));
                        break;
                    case sym.CierreBloque:
                        sb.append(String.format(formato, "Columna " + contColumna , "<CierreBloque>" , symbol.value ));
                        break;
                    case sym.Integer:
                        sb.append(String.format(formato, "Columna " + contColumna , "<Integer>" , symbol.value ));
                        break;
                    case sym.Float:
                        sb.append(String.format(formato, "Columna " + contColumna , "<Float>" , symbol.value ));
                        break;
                    case sym.Bool:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Bool>" , symbol.value ));
                       break;
                    case sym.Char:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Char>" , symbol.value ));
                       break;
                    case sym.String:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<String>" , symbol.value ));
                       break;
                    case sym.Identificador:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Identificador>" , symbol.value ));
                       break;
                    case sym.CorcheteApertura:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<CorcheteApertura>" , symbol.value ));
                       break;
                    case sym.CorcheteCierre:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<CorcheteCierre>" , symbol.value ));
                       break;
                    case sym.SignoAsignacion:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<SignoAsignacion>" , symbol.value ));
                       break;
                    case sym.ParentesisApertura:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<ParentesisApertura>" , symbol.value ));
                       break;
                    case sym.ParentesisCierre:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<ParentesisApertura>" , symbol.value ));
                       break;
                    case sym.LiteralCaracter:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<LiteralCaracter>" , symbol.value ));
                       break;
                    case sym.LiteralCadena:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<LiteralCadena>" , symbol.value ));
                       break;
                    case sym.Suma:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Suma>" , symbol.value ));
                       break;
                    case sym.Resta:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Resta>" , symbol.value ));
                       break;
                    case sym.Division:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Division>" , symbol.value ));
                       break;
                    case sym.Multiplicacion:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Multiplicacion>" , symbol.value ));
                       break;
                    case sym.Modulo:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Modulo>" , symbol.value ));
                       break;
                    case sym.Potencia:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Potencia>" , symbol.value ));
                       break;
                    case sym.Incremento:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Incremento>" , symbol.value ));
                       break;
                    case sym.Decremento:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Decremento>" , symbol.value ));
                       break;
                    case sym.Negativo:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Negativo>" , symbol.value ));
                       break;
                    case sym.Menor:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Menor>" , symbol.value ));
                       break;
                    case sym.MenorIgual:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<MenorIgual>" , symbol.value ));
                       break;
                    case sym.Mayor:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Mayor>" , symbol.value ));
                       break;
                    case sym.MayorIgual:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<MayorIgual>" , symbol.value ));
                       break;
                    case sym.Igual:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Igual>" , symbol.value ));
                       break;
                    case sym.Diferente:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Diferente>" , symbol.value ));
                       break;
                    case sym.Conjuncion:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Conjuncion>" , symbol.value ));
                       break;
                    case sym.Disyuncion:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Disyuncion>" , symbol.value ));
                       break;
                    case sym.Negacion:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Negacion>" , symbol.value ));
                       break;
                    case sym.If:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<If>" , symbol.value ));
                       break;
                    case sym.Else:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Else>" , symbol.value ));
                       break;
                    case sym.While:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<While>" , symbol.value ));
                       break;
                    case sym.For:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<For>" , symbol.value ));
                       break;
                    case sym.Switch:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Switch>" , symbol.value ));
                       break;
                    case sym.Case:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Case>" , symbol.value ));
                       break;
                    case sym.Default:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Default>" , symbol.value ));
                       break;
                    case sym.Break:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Break>" , symbol.value ));
                       break;
                    case sym.Return:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Return>" , symbol.value ));
                       break;
                    case sym.DosPuntos:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<DosPuntos>" , symbol.value ));
                       break;
                    case sym.Print:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Print>" , symbol.value ));
                       break;
                    case sym.Read:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Read>" , symbol.value ));
                       break;
                    case sym.Comentario:
                       String valorSinSaltosComentario = symbol.value.toString().replaceAll("[\\r\\n]+", " "); 
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Comentario>" , valorSinSaltosComentario ));
                       break;                    
                    case sym.FinSentencia:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<FinSentencia>" , symbol.value ));
                       break;
                    case sym.Main:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Main>" , symbol.value ));
                       break;
                    case sym.LiteralEntero:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<LiteralEntero>" , symbol.value ));
                       break;   
                    case sym.LiteralFlotante:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<LiteralFlotante>" , symbol.value ));
                       break;
                    case sym.Coma:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<Coma>" , symbol.value ));
                       break;
                    case sym.LiteralBool:
                       sb.append(String.format(formato, "Columna " + contColumna ,"<LiteralBool>" , symbol.value ));
                       break;                        
                    case sym.Error:
                        if(continuaError){
                            break;
                        }
                        sb.append(String.format(formato, "Columna " + contColumna ,"<ERROR: Símbolo no definido>" , "" ));
                        //Flag para registrar error solo una vez
                        continuaError = true;
                        break;
                    case sym.EspacioEnBlanco:
                        break;
                    case sym.FinDeArchivo:
                        sb.append(String.format(formato, "<FIN DE ARCHIVO>", "", ""));
                        //Devuelve el resultado del texto analizado al alcanzar el fin del archivo
                        JTATextoArea1.setText(sb.toString());
                        System.out.print("\033[H\033[2J");  
                        System.out.flush();  
                        System.out.print(sb.toString());
                        return;    
                    default:
                        sb.append(String.format(formato, "Columna " + contColumna , "Símbolo <no controlado>", symbol.value ));
                        break;  
                }
                contColumna+= lexemaLength;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error durante el análisis: " + e.getMessage());
        }
    }

    private void guardarEnArchivo(String contenido) {
        //Abre una ventana de dialogo para elegir la ruta donde se guardará el texto analizado léxicamente.
        JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showSaveDialog(null);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            
           // Verificar si el archivo tiene la extensión .txt
           if (!archivo.getName().toLowerCase().endsWith(".txt")) {
               archivo = new File(archivo.getAbsolutePath() + ".txt");
           }
            
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(archivo))) {
                writer.write(contenido);
                JOptionPane.showMessageDialog(null, "Archivo guardado exitosamente en: " + archivo.getPath());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error al guardar el archivo: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Guardado cancelado.");
        }
    }
}
