/* The following code was generated by JFlex 1.4.3 on 12/17/24, 4:00 PM */

package code;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/17/24, 4:00 PM from the specification file
 * <tt>D:/PP01-Compiladores_E_Interpretes/programa/src/code/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0, 26, 37,  0,  0,  0, 25,  0,  0, 38,  0, 34,  4,  6, 39, 
     3,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0,  0,  0,  0,  0,  0, 
     0, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
    36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,  0, 27,  0,  0, 35, 
     0, 12, 15, 16, 20, 10, 11, 24, 30, 19, 36, 36, 13, 21, 17, 18, 
    22, 23,  8, 14,  7,  9, 28, 31, 32, 29, 33,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\25\1"+
    "\1\6\2\1\41\0\1\7\1\0\1\10\10\0\1\11"+
    "\47\0\1\12\1\0\1\13\1\14\4\0\1\15\30\0"+
    "\1\16\7\0\1\17\3\0\1\20\6\0\1\21\1\0"+
    "\1\14\6\0\1\22\3\0\1\23\2\0\1\24\6\0"+
    "\1\25\1\0\1\26\2\0\1\27\3\0\1\30\1\0"+
    "\1\31\15\0\1\32\1\33\5\0\1\34\2\0\1\35"+
    "\1\36\1\37\2\0\1\40\1\41\1\42\1\43\15\0"+
    "\1\44\3\0\1\45\1\46\2\0\1\47\5\0\1\50"+
    "\1\51\1\52\1\53\4\0\1\54\1\0\1\55\1\56"+
    "\1\57\1\60\10\0\1\61\1\0\1\62\3\0\1\63"+
    "\1\0\1\64\3\0\1\65\1\66\1\0\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\50\0\170\0\240\0\310\0\360"+
    "\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230"+
    "\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370"+
    "\0\u0398\0\u03c0\0\u03e8\0\u0410\0\50\0\u0438\0\u0460\0\u0488"+
    "\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8"+
    "\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708"+
    "\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848"+
    "\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0370"+
    "\0\50\0\u0398\0\50\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28"+
    "\0\u0a50\0\u0a78\0\u0aa0\0\u0488\0\u0ac8\0\u0af0\0\u0b18\0\u0b40"+
    "\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80"+
    "\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0"+
    "\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00"+
    "\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040"+
    "\0\u1068\0\u1090\0\u10b8\0\50\0\u10e0\0\50\0\u1108\0\u1130"+
    "\0\u1158\0\u1180\0\u11a8\0\50\0\u11d0\0\u11f8\0\u1220\0\u1248"+
    "\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388"+
    "\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8"+
    "\0\u14f0\0\u1518\0\u1540\0\u1568\0\50\0\u1590\0\u15b8\0\u15e0"+
    "\0\u1608\0\u1630\0\u1658\0\u1680\0\50\0\u16a8\0\u16d0\0\u16f8"+
    "\0\50\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8\0\50"+
    "\0\u1810\0\50\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900"+
    "\0\50\0\u1928\0\u1950\0\u1978\0\50\0\u19a0\0\u19c8\0\50"+
    "\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\50\0\u1ae0"+
    "\0\50\0\u1b08\0\u1b30\0\u09b0\0\u1b58\0\u1b80\0\u1ba8\0\50"+
    "\0\u1bd0\0\50\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\u1c98\0\u1cc0"+
    "\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\50"+
    "\0\50\0\u1e00\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\50\0\u1ec8"+
    "\0\u1ef0\0\50\0\50\0\50\0\u1f18\0\u1f40\0\50\0\50"+
    "\0\50\0\50\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030"+
    "\0\u2058\0\u2080\0\u20a8\0\u20d0\0\u20f8\0\u2120\0\u2148\0\50"+
    "\0\u2170\0\u2198\0\u21c0\0\50\0\50\0\u21e8\0\u2210\0\50"+
    "\0\u2238\0\u2260\0\u2288\0\u22b0\0\u22d8\0\50\0\50\0\50"+
    "\0\50\0\u2300\0\u2328\0\u2350\0\u2378\0\50\0\u23a0\0\50"+
    "\0\50\0\50\0\50\0\u23c8\0\u23f0\0\u2418\0\u2440\0\u2468"+
    "\0\u2490\0\u24b8\0\u24e0\0\50\0\u2508\0\50\0\u2530\0\u2558"+
    "\0\u2580\0\50\0\u25a8\0\50\0\u25d0\0\u25f8\0\u2620\0\50"+
    "\0\50\0\u2648\0\50\0\50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\2\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\2\1\34\3\2"+
    "\1\35\1\36\1\2\1\37\2\2\51\0\1\3\54\0"+
    "\1\40\46\0\1\7\45\0\1\7\1\0\1\7\1\40"+
    "\51\0\1\41\51\0\1\42\7\0\1\43\42\0\1\44"+
    "\10\0\1\45\36\0\1\46\1\47\2\0\1\50\12\0"+
    "\1\51\27\0\1\52\6\0\1\53\43\0\1\54\4\0"+
    "\1\55\44\0\1\56\1\0\1\57\34\0\1\60\3\0"+
    "\1\61\44\0\1\62\10\0\1\63\1\64\40\0\1\65"+
    "\5\0\1\66\53\0\1\67\42\0\1\70\37\0\1\71"+
    "\50\0\1\72\1\0\1\73\6\0\1\74\35\0\1\75"+
    "\46\0\1\76\3\0\1\77\33\0\31\100\1\101\16\100"+
    "\32\102\1\103\1\104\14\102\43\0\1\105\20\0\1\106"+
    "\47\0\1\107\6\0\1\110\27\0\1\111\1\0\1\111"+
    "\1\0\22\111\3\0\1\112\5\111\2\0\1\111\11\0"+
    "\1\113\44\0\1\114\1\0\1\114\53\0\1\115\73\0"+
    "\1\116\36\0\1\117\32\0\1\120\54\0\1\121\46\0"+
    "\1\122\54\0\1\123\36\0\1\124\24\0\1\125\25\0"+
    "\1\126\52\0\1\127\53\0\1\130\36\0\1\131\73\0"+
    "\1\132\35\0\1\133\55\0\1\134\41\0\1\135\42\0"+
    "\1\136\60\0\1\137\31\0\1\140\14\0\1\141\34\0"+
    "\1\142\45\0\1\143\23\0\1\144\33\0\1\145\41\0"+
    "\1\146\44\0\1\147\52\0\1\150\52\0\1\151\42\0"+
    "\1\152\17\0\1\153\40\0\1\154\51\0\1\155\47\0"+
    "\1\156\42\0\1\157\31\0\2\102\1\0\45\102\2\105"+
    "\1\0\30\105\1\160\14\105\10\0\1\161\63\0\1\162"+
    "\41\0\1\163\34\0\1\111\1\0\1\111\1\0\22\111"+
    "\3\0\6\111\1\0\1\164\1\111\6\0\1\111\1\0"+
    "\1\111\1\0\3\111\1\165\16\111\3\0\6\111\1\0"+
    "\1\164\1\111\51\0\1\166\13\0\1\167\47\0\1\170"+
    "\57\0\1\171\50\0\1\172\33\0\1\173\62\0\1\174"+
    "\36\0\1\175\46\0\1\176\50\0\1\177\11\0\1\200"+
    "\34\0\1\201\55\0\1\202\41\0\1\203\51\0\1\204"+
    "\60\0\1\205\63\0\1\206\21\0\1\207\63\0\1\210"+
    "\31\0\1\211\63\0\1\212\33\0\1\213\52\0\1\214"+
    "\45\0\1\215\47\0\1\216\62\0\1\217\62\0\1\220"+
    "\32\0\1\221\40\0\1\222\56\0\1\223\46\0\1\224"+
    "\64\0\1\225\34\0\1\226\43\0\1\227\43\0\1\230"+
    "\56\0\1\231\54\0\1\232\21\0\2\105\1\0\30\105"+
    "\1\160\7\105\1\233\4\105\23\0\1\234\40\0\1\235"+
    "\42\0\1\236\43\0\1\111\1\0\1\111\1\0\1\111"+
    "\1\237\20\111\3\0\6\111\1\0\1\164\1\111\24\0"+
    "\1\240\44\0\1\241\46\0\1\242\57\0\1\243\32\0"+
    "\1\244\57\0\1\245\41\0\1\246\47\0\1\247\51\0"+
    "\1\250\63\0\1\251\31\0\1\252\47\0\1\253\45\0"+
    "\1\254\1\0\1\255\5\0\1\256\41\0\1\257\54\0"+
    "\1\260\42\0\1\261\60\0\1\262\40\0\1\263\57\0"+
    "\1\264\37\0\1\265\42\0\1\266\50\0\1\267\53\0"+
    "\1\270\57\0\1\271\35\0\1\272\53\0\1\273\41\0"+
    "\1\274\63\0\1\275\61\0\1\276\27\0\1\277\40\0"+
    "\1\300\61\0\1\301\46\0\1\302\43\0\1\303\33\0"+
    "\2\105\1\0\30\105\1\160\13\105\1\304\22\0\1\305"+
    "\47\0\1\306\30\0\1\111\1\0\1\111\1\0\5\111"+
    "\1\307\14\111\3\0\6\111\1\0\1\164\1\111\25\0"+
    "\1\310\40\0\1\311\56\0\1\312\37\0\1\313\73\0"+
    "\1\314\41\0\1\315\34\0\1\316\42\0\1\317\67\0"+
    "\1\320\31\0\1\321\62\0\1\322\33\0\1\323\57\0"+
    "\1\324\42\0\1\325\51\0\1\326\72\0\1\327\30\0"+
    "\1\330\41\0\1\331\47\0\1\332\47\0\1\333\52\0"+
    "\1\334\45\0\1\335\52\0\1\336\41\0\1\337\57\0"+
    "\1\340\50\0\1\341\62\0\1\342\21\0\1\343\55\0"+
    "\1\344\41\0\1\345\42\0\1\111\1\0\1\111\1\0"+
    "\12\111\1\346\7\111\3\0\6\111\1\0\1\164\1\111"+
    "\25\0\1\347\37\0\1\350\51\0\1\351\47\0\1\352"+
    "\67\0\1\353\25\0\1\354\51\0\1\355\63\0\1\356"+
    "\45\0\1\357\33\0\1\360\44\0\1\361\55\0\1\362"+
    "\41\0\1\363\54\0\1\364\43\0\1\365\1\0\1\366"+
    "\5\0\1\367\53\0\1\370\34\0\1\371\52\0\1\372"+
    "\47\0\1\373\43\0\1\374\77\0\1\375\32\0\1\376"+
    "\27\0\1\111\1\0\1\111\1\0\13\111\1\377\6\111"+
    "\3\0\6\111\1\0\1\164\1\111\15\0\1\u0100\47\0"+
    "\1\u0101\52\0\1\u0102\46\0\1\u0103\47\0\1\u0104\54\0"+
    "\1\u0105\50\0\1\u0106\42\0\1\u0107\46\0\1\u0108\43\0"+
    "\1\u0109\51\0\1\u010a\62\0\1\u010b\33\0\1\u010c\50\0"+
    "\1\u010d\47\0\1\u010e\62\0\1\u010f\36\0\1\u0110\36\0"+
    "\1\111\1\0\1\111\1\0\22\111\3\0\6\111\1\0"+
    "\1\u0111\1\111\24\0\1\u0112\50\0\1\u0113\42\0\1\u0114"+
    "\61\0\1\u0115\27\0\1\u0116\70\0\1\u0117\45\0\1\u0118"+
    "\33\0\1\u0119\56\0\1\u011a\45\0\1\u011b\52\0\1\u011c"+
    "\36\0\1\u011d\60\0\1\u011e\41\0\1\u011f\47\0\1\u0120"+
    "\54\0\1\u0121\42\0\1\u0122\56\0\1\u0123\36\0\1\u0124"+
    "\52\0\1\u0125\61\0\1\u0126\27\0\1\u0127\62\0\1\u0128"+
    "\47\0\1\u0129\36\0\1\u012a\60\0\1\u012b\37\0\1\u012c"+
    "\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\30\1\1\11\2\1\41\0"+
    "\1\11\1\0\1\11\10\0\1\1\47\0\1\11\1\0"+
    "\1\11\1\1\4\0\1\11\30\0\1\11\7\0\1\11"+
    "\3\0\1\11\6\0\1\11\1\0\1\11\6\0\1\11"+
    "\3\0\1\11\2\0\1\11\6\0\1\11\1\0\1\11"+
    "\2\0\1\1\3\0\1\11\1\0\1\11\15\0\2\11"+
    "\5\0\1\11\2\0\3\11\2\0\4\11\15\0\1\11"+
    "\3\0\2\11\2\0\1\11\5\0\4\11\4\0\1\11"+
    "\1\0\4\11\10\0\1\11\1\0\1\11\3\0\1\11"+
    "\1\0\1\11\3\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return new Symbol(sym.Incremento, yychar, yyline, yytext());
          }
        case 57: break;
        case 54: 
          { return new Symbol(sym.ParentesisCierre, yychar, yyline, yytext());
          }
        case 58: break;
        case 7: 
          { return new Symbol(sym.LiteralCaracter, yychar, yyline, yytext());
          }
        case 59: break;
        case 34: 
          { return new Symbol(sym.Read, yychar, yyline, yytext());
          }
        case 60: break;
        case 19: 
          { return new Symbol(sym.Break, yychar, yyline, yytext());
          }
        case 61: break;
        case 31: 
          { return new Symbol(sym.Switch, yychar, yyline, yytext());
          }
        case 62: break;
        case 37: 
          { return new Symbol(sym.Conjuncion, yychar, yyline, yytext());
          }
        case 63: break;
        case 15: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 64: break;
        case 16: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 65: break;
        case 26: 
          { return new Symbol(sym.Char, yychar, yyline, yytext());
          }
        case 66: break;
        case 20: 
          { return new Symbol(sym.Print, yychar, yyline, yytext());
          }
        case 67: break;
        case 12: 
          { return new Symbol(sym.LiteralBool, yychar, yyline, yytext());
          }
        case 68: break;
        case 23: 
          { return new Symbol(sym.MultipleLineC, yychar, yyline, yytext());
          }
        case 69: break;
        case 49: 
          { return new Symbol(sym.ParentesisApertura, yychar, yyline, yytext());
          }
        case 70: break;
        case 11: 
          { return new Symbol(sym.OneLineC, yychar, yyline, yytext());
          }
        case 71: break;
        case 29: 
          { return new Symbol(sym.Decremento, yychar, yyline, yytext());
          }
        case 72: break;
        case 24: 
          { return new Symbol(sym.Bool, yychar, yyline, yytext());
          }
        case 73: break;
        case 47: 
          { return new Symbol(sym.MenorIgual, yychar, yyline, yytext());
          }
        case 74: break;
        case 28: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 75: break;
        case 8: 
          { return new Symbol(sym.LiteralCadena, yychar, yyline, yytext());
          }
        case 76: break;
        case 9: 
          { return new Symbol(sym.LiteralFlotante, yychar, yyline, yytext());
          }
        case 77: break;
        case 53: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 78: break;
        case 48: 
          { return new Symbol(sym.FinSentencia, yychar, yyline, yytext());
          }
        case 79: break;
        case 30: 
          { return new Symbol(sym.Disyuncion, yychar, yyline, yytext());
          }
        case 80: break;
        case 27: 
          { return new Symbol(sym.String, yychar, yyline, yytext());
          }
        case 81: break;
        case 55: 
          { return new Symbol(sym.CierreBloque, yychar, yyline, yytext());
          }
        case 82: break;
        case 25: 
          { return new Symbol(sym.Default, yychar, yyline, yytext());
          }
        case 83: break;
        case 38: 
          { return new Symbol(sym.Mayor, yychar, yyline, yytext());
          }
        case 84: break;
        case 35: 
          { return new Symbol(sym.SignoAsignacion, yychar, yyline, yytext());
          }
        case 85: break;
        case 18: 
          { return new Symbol(sym.DosPuntos, yychar, yyline, yytext());
          }
        case 86: break;
        case 21: 
          { return new Symbol(sym.Modulo, yychar, yyline, yytext());
          }
        case 87: break;
        case 17: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 88: break;
        case 41: 
          { return new Symbol(sym.Menor, yychar, yyline, yytext());
          }
        case 89: break;
        case 5: 
          { return new Symbol(sym.Negativo, yychar, yyline, yytext());
          }
        case 90: break;
        case 13: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 91: break;
        case 50: 
          { return new Symbol(sym.AperturaBloque, yychar, yyline, yytext());
          }
        case 92: break;
        case 3: 
          { return new Symbol(sym.Linea, yychar, yyline, yytext());
          }
        case 93: break;
        case 45: 
          { return new Symbol(sym.Case, yychar, yyline, yytext());
          }
        case 94: break;
        case 46: 
          { return new Symbol(sym.Main, yychar, yyline, yytext());
          }
        case 95: break;
        case 43: 
          { return new Symbol(sym.Negacion, yychar, yyline, yytext());
          }
        case 96: break;
        case 33: 
          { return new Symbol(sym.MayorIgual, yychar, yyline, yytext());
          }
        case 97: break;
        case 40: 
          { return new Symbol(sym.Potencia, yychar, yyline, yytext());
          }
        case 98: break;
        case 2: 
          { return new Symbol(sym.EspacioEnBlanco, yychar, yyline, yytext());
          }
        case 99: break;
        case 56: 
          { return new Symbol(sym.CorcheteCierre, yychar, yyline, yytext());
          }
        case 100: break;
        case 51: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 101: break;
        case 32: 
          { return new Symbol(sym.Integer, yychar, yyline, yytext());
          }
        case 102: break;
        case 36: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 103: break;
        case 44: 
          { return new Symbol(sym.Diferente, yychar, yyline, yytext());
          }
        case 104: break;
        case 1: 
          { return new Symbol(sym.Error, yychar, yyline, yytext());
          }
        case 105: break;
        case 39: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 106: break;
        case 4: 
          { return new Symbol(sym.LiteralEntero, yychar, yyline, yytext());
          }
        case 107: break;
        case 52: 
          { return new Symbol(sym.CorcheteApertura, yychar, yyline, yytext());
          }
        case 108: break;
        case 14: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 109: break;
        case 6: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 110: break;
        case 10: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 111: break;
        case 42: 
          { return new Symbol(sym.Float, yychar, yyline, yytext());
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol(sym.FinDeArchivo, yychar, yyline, yytext());
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
