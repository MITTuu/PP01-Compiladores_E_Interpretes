
package code;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class GUI_Main extends javax.swing.JFrame {

    /**
     * Creates new form GUI_Main
     */
    public GUI_Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPAnalizadorLexico = new javax.swing.JPanel();
        JBCargar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTATextoArea = new javax.swing.JTextArea();
        JBGenerarAnalisis = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JPAnalizadorLexico.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Analizador Léxico", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        JBCargar.setText("Cargar Archivo");
        JBCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCargarActionPerformed(evt);
            }
        });

        JTATextoArea.setColumns(20);
        JTATextoArea.setRows(5);
        jScrollPane1.setViewportView(JTATextoArea);

        JBGenerarAnalisis.setText("Generar Análisis");
        JBGenerarAnalisis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBGenerarAnalisisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPAnalizadorLexicoLayout = new javax.swing.GroupLayout(JPAnalizadorLexico);
        JPAnalizadorLexico.setLayout(JPAnalizadorLexicoLayout);
        JPAnalizadorLexicoLayout.setHorizontalGroup(
            JPAnalizadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPAnalizadorLexicoLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(JPAnalizadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPAnalizadorLexicoLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(JPAnalizadorLexicoLayout.createSequentialGroup()
                        .addComponent(JBCargar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JBGenerarAnalisis)
                        .addGap(90, 90, 90))))
        );
        JPAnalizadorLexicoLayout.setVerticalGroup(
            JPAnalizadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPAnalizadorLexicoLayout.createSequentialGroup()
                .addGroup(JPAnalizadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPAnalizadorLexicoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(JBCargar))
                    .addComponent(JBGenerarAnalisis))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPAnalizadorLexico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPAnalizadorLexico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        JPAnalizadorLexico.getAccessibleContext().setAccessibleName("Analizador Léxico");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBGenerarAnalisisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBGenerarAnalisisActionPerformed
        try {
            analizadorLexico();
        } catch (Exception e) {
            Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_JBGenerarAnalisisActionPerformed

    private void JBCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBCargarActionPerformed
       JFileChooser chooser = new JFileChooser();
       chooser.showOpenDialog(null);
       File archivo = new File(chooser.getSelectedFile().getAbsolutePath());
       
       try {
           String ST = new String(Files.readAllBytes(archivo.toPath()));
           JTATextoArea.setText(ST);
       } catch (FileNotFoundException ex){
            Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);           
       } catch (IOException ex) {
            Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_JBCargarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBCargar;
    private javax.swing.JButton JBGenerarAnalisis;
    private javax.swing.JPanel JPAnalizadorLexico;
    private javax.swing.JTextArea JTATextoArea;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void analizadorLexico() {
       int contLinea = 1;
       int contColumna = 1;
       int lexemaLength = 0;
       boolean continuaError = false;
        // Obtén el texto de entrada desde txtResultado
        String expr = JTATextoArea.getText(); 
        Lexer lexer = new Lexer(new StringReader(expr));
        String resultado = "LINEA " + contLinea + "\t\t\t\t\t\tSIMBOLO \n";

        try {
            while (true) {
                Tokens token = lexer.yylex();                
                if (token == null) {
                    // Guardar el resultado en un archivo
                    guardarEnArchivo(resultado);
                    return;
                }
                //Registrar longitud de la cadena de caracteres del lexema para calcular la columna
                lexemaLength = lexer.lexeme.length();
                
                //Flag para registrar error solo una vez
                if(continuaError && token != Tokens.Error){
                    continuaError = false;
                }
                switch (token) {
                    case Linea:
                        contLinea++;
                        contColumna = 0;
                        resultado += "LINEA " + contLinea + "\n";
                        break;
                    case AperturaBloque:
                        resultado += "Columna " + contColumna + "\t<Apertura de Bloque>\t\t" + lexer.lexeme +   "\n";
                        break;
                    case CierreBloque:
                        resultado += "Columna " + contColumna + "\t<CierreBloque>\t\t\t" + lexer.lexeme +   "\n";
                        break;
                    case Integer:
                        resultado += "Columna " + contColumna + "\t<Integer>\t\t\t" + lexer.lexeme +   "\n";
                        break;
                    case Float:
                        resultado += "Columna " + contColumna + "\t<Float>\t\t\t\t" + lexer.lexeme +  "\n";
                        break;
                    case Bool:
                       resultado += "Columna " + contColumna +"\t<Bool>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Char:
                       resultado += "Columna " + contColumna +"\t<Char>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case String:
                       resultado += "Columna " + contColumna +"\t<String>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Identificador:
                       resultado += "Columna " + contColumna +"\t<Identificador>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case CorcheteApertura:
                       resultado += "Columna " + contColumna +"\t<CorcheteApertura>\t\t" + lexer.lexeme +   "\n";
                       break;
                    case CorcheteCierre:
                       resultado += "Columna " + contColumna +"\t<CorcheteCierre>\t\t" + lexer.lexeme +   "\n";
                       break;
                    case SignoAsignacion:
                       resultado += "Columna " + contColumna +"\t<SignoAsignacion>\t\t" + lexer.lexeme +   "\n";
                       break;
                    case ParentesisApertura:
                       resultado += "Columna " + contColumna +"\t<ParentesisApertura>\t\t" + lexer.lexeme +   "\n";
                       break;
                    case ParentesisCierre:
                       resultado += "Columna " + contColumna +"\t<ParentesisApertura>\t\t" + lexer.lexeme +   "\n";
                       break;
                    case LiteralCaracter:
                       resultado += "Columna " + contColumna +"\t<LiteralCaracter>\t\t" + lexer.lexeme +   "\n";
                       break;
                    case LiteralCadena:
                       resultado += "Columna " + contColumna +"\t<LiteralCadena>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Suma:
                       resultado += "Columna " + contColumna +"\t<Suma>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Resta:
                       resultado += "Columna " + contColumna +"\t<Resta>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Division:
                       resultado += "Columna " + contColumna +"\t<Division>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Multiplicacion:
                       resultado += "Columna " + contColumna +"\t<Multiplicacion>\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Modulo:
                       resultado += "Columna " + contColumna +"\t<Modulo>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Potencia:
                       resultado += "Columna " + contColumna +"\t<Potencia>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Incremento:
                       resultado += "Columna " + contColumna +"\t<Incremento>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Decremento:
                       resultado += "Columna " + contColumna +"\t<Decremento>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Negativo:
                       resultado += "Columna " + contColumna +"\t<Negativo>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Menor:
                       resultado += "Columna " + contColumna +"\t<Menor>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case MenorIgual:
                       resultado += "Columna " + contColumna +"\t<MenorIgual>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Mayor:
                       resultado += "Columna " + contColumna +"\t<Mayor>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case MayorIgual:
                       resultado += "Columna " + contColumna +"\t<MayorIgual>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Igual:
                       resultado += "Columna " + contColumna +"\t<Igual>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Diferente:
                       resultado += "Columna " + contColumna +"\t<Diferente>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Conjuncion:
                       resultado += "Columna " + contColumna +"\t<Conjuncion>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Disyuncion:
                       resultado += "Columna " + contColumna +"\t<Disyuncion>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Negacion:
                       resultado += "Columna " + contColumna +"\t<Negacion>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case If:
                       resultado += "Columna " + contColumna +"\t<If>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Else:
                       resultado += "Columna " + contColumna +"\t<Else>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case While:
                       resultado += "Columna " + contColumna +"\t<While>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case For:
                       resultado += "Columna " + contColumna +"\t<For>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Switch:
                       resultado += "Columna " + contColumna +"\t<Switch>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Case:
                       resultado += "Columna " + contColumna +"\t<Case>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Default:
                       resultado += "Columna " + contColumna +"\t<Default>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Break:
                       resultado += "Columna " + contColumna +"\t<Break>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Return:
                       resultado += "Columna " + contColumna +"\t<Return>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case DosPuntos:
                       resultado += "Columna " + contColumna +"\t<DosPuntos>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Print:
                       resultado += "Columna " + contColumna +"\t<Print>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Read:
                       resultado += "Columna " + contColumna +"\t<Read>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case OneLineC:
                       resultado += "Columna " + contColumna +"\t<OneLineC>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case MultipleLineC:
                       resultado += "Columna " + contColumna +"\t<MultipleLineC>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case FinSentencia:
                       resultado += "Columna " + contColumna +"\t<FinSentencia>\t\t\t" + lexer.lexeme +   "\n";
                       break;
                    case Main:
                       resultado += "Columna " + contColumna +"\t<Main>\t\t\t\t" + lexer.lexeme +   "\n";
                       break;                                      
                    case Error:
                        if(continuaError){
                            break;
                        }
                        resultado += "Columna " + contColumna +"\t<ERROR: Símbolo no definido>" + "\n";
                        //Flag para registrar error solo una vez
                        continuaError = true;
                        break;
                    case EspacioEnBlanco:
                        break;
                    case FinDeArchivo:
                        resultado += "  <Fin de archivo>\n";
                        //Devuelve el resultado del texto analizado al alcanzar el fin del archivo
                        guardarEnArchivo(resultado);
                        return;    
                    default:
                        resultado += "Columna " + contColumna + "\tSin Token < " + lexer.lexeme + " >" +   "\n";
                        break;  
                }
                contColumna+= lexemaLength;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error durante el análisis: " + e.getMessage());
        }
    }

    private void guardarEnArchivo(String contenido) {
        //Abre una ventana de dialogo para elegir la ruta donde se guardará el texto analizado léxicamente.
        JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showSaveDialog(null);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            
           // Verificar si el archivo tiene la extensión .txt
           if (!archivo.getName().toLowerCase().endsWith(".txt")) {
               archivo = new File(archivo.getAbsolutePath() + ".txt");
           }
            
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(archivo))) {
                writer.write(contenido);
                JOptionPane.showMessageDialog(null, "Archivo guardado exitosamente en: " + archivo.getPath());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error al guardar el archivo: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Guardado cancelado.");
        }
    }
}
