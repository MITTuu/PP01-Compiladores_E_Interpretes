/* The following code was generated by JFlex 1.4.3 on 12/14/24, 10:33 PM */

package code;
import static code.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/14/24, 10:33 PM from the specification file
 * <tt>D:/TEC/Verano 2024/Compiladores e Interpretes/PP01-Compiladores_E_Interpretes/programa/src/code/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\1\2\0\1\0\22\0\1\0\1\0\1\27\1\43"+
    "\3\0\1\26\2\0\1\33\2\0\1\37\1\44\1\47\12\23\5\0"+
    "\1\46\1\0\32\23\1\30\1\45\1\32\1\31\1\22\1\0\1\2"+
    "\1\3\1\6\1\14\1\5\1\16\1\25\1\36\1\13\2\23\1\15"+
    "\1\17\1\10\1\12\1\21\1\24\1\4\1\20\1\11\1\7\1\34"+
    "\1\40\1\41\1\35\1\42\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\25\1\1\3\2\1\40\0\1\4"+
    "\45\0\1\5\7\0\1\6\12\0\1\7\20\0\1\10"+
    "\12\0\1\11\10\0\1\12\3\0\1\13\3\0\1\14"+
    "\4\0\1\15\7\0\1\16\3\0\1\17\1\20\21\0"+
    "\1\21\1\22\1\0\1\23\3\0\1\24\2\0\1\25"+
    "\4\0\1\26\1\27\1\0\1\30\10\0\1\31\1\32"+
    "\1\0\1\33\4\0\1\34\1\35\4\0\1\36\1\37"+
    "\7\0\1\40\1\41\1\42\1\43\5\0\1\44\2\0"+
    "\1\45\1\46\1\47\1\50\3\0\1\51\5\0\1\52"+
    "\1\53\1\0\1\54\3\0\1\55\1\0\1\56\3\0"+
    "\1\57\1\60\1\0\1\61\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\50\0\120\0\170\0\240\0\310\0\360"+
    "\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230"+
    "\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370"+
    "\0\50\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488"+
    "\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8"+
    "\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708"+
    "\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848"+
    "\0\u0870\0\u0898\0\u02f8\0\50\0\u08c0\0\u08e8\0\u0910\0\u0938"+
    "\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78"+
    "\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8"+
    "\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8"+
    "\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38"+
    "\0\u0e60\0\50\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50"+
    "\0\u0f78\0\50\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068"+
    "\0\u1090\0\u10b8\0\u10e0\0\u1108\0\50\0\u1130\0\u1158\0\u1180"+
    "\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0"+
    "\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388\0\50\0\u13b0\0\u13d8"+
    "\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518"+
    "\0\50\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630"+
    "\0\u1658\0\50\0\u1680\0\u16a8\0\u16d0\0\50\0\u16f8\0\u1720"+
    "\0\u1748\0\50\0\u1770\0\u1798\0\u17c0\0\u17e8\0\50\0\u1810"+
    "\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\50\0\u1928"+
    "\0\u1950\0\u1978\0\50\0\50\0\u19a0\0\u19c8\0\u19f0\0\u1a18"+
    "\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58"+
    "\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\50\0\50\0\u1c48"+
    "\0\50\0\u1c70\0\u1c98\0\u1cc0\0\50\0\u1ce8\0\u1d10\0\50"+
    "\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\50\0\50\0\u1dd8\0\50"+
    "\0\u1e00\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18"+
    "\0\50\0\50\0\u1f40\0\50\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0"+
    "\0\50\0\50\0\u2008\0\u2030\0\u2058\0\u2080\0\50\0\50"+
    "\0\u20a8\0\u20d0\0\u20f8\0\u2120\0\u2148\0\u2170\0\u2198\0\50"+
    "\0\50\0\50\0\50\0\u21c0\0\u21e8\0\u2210\0\u2238\0\u2260"+
    "\0\50\0\u2288\0\u22b0\0\50\0\50\0\50\0\50\0\u22d8"+
    "\0\u2300\0\u2328\0\50\0\u2350\0\u2378\0\u23a0\0\u23c8\0\u23f0"+
    "\0\50\0\50\0\u2418\0\50\0\u2440\0\u2468\0\u2490\0\50"+
    "\0\u24b8\0\50\0\u24e0\0\u2508\0\u2530\0\50\0\50\0\u2558"+
    "\0\50\0\50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\2\1\17\1\20"+
    "\1\21\1\2\1\22\1\2\1\23\1\24\1\25\1\26"+
    "\4\2\1\27\1\2\1\30\1\31\3\2\1\32\1\2"+
    "\1\33\2\2\53\0\1\34\10\0\1\35\35\0\1\36"+
    "\1\0\1\37\50\0\1\40\4\0\1\41\45\0\1\42"+
    "\4\0\1\43\2\0\1\44\13\0\1\45\22\0\1\46"+
    "\2\0\1\47\1\50\51\0\1\51\3\0\1\52\30\0"+
    "\1\53\7\0\1\54\41\0\1\55\64\0\1\56\36\0"+
    "\1\57\46\0\1\60\53\0\1\61\36\0\1\62\2\0"+
    "\1\63\5\0\1\64\44\0\1\65\2\0\1\66\36\0"+
    "\20\67\1\0\3\67\6\0\3\67\1\0\3\67\14\0"+
    "\1\70\42\0\1\71\1\0\1\72\43\0\26\73\1\74"+
    "\21\73\30\0\1\75\21\0\1\76\47\0\1\77\10\0"+
    "\1\100\100\0\1\101\25\0\1\102\31\0\1\103\77\0"+
    "\1\104\30\0\1\105\44\0\1\106\72\0\1\107\26\0"+
    "\1\110\44\0\1\111\22\0\1\112\31\0\1\113\37\0"+
    "\1\114\46\0\1\115\63\0\1\116\32\0\1\117\12\0"+
    "\1\120\35\0\1\121\53\0\1\122\40\0\1\123\51\0"+
    "\1\124\27\0\1\125\21\0\1\126\50\0\1\127\45\0"+
    "\1\130\53\0\1\131\43\0\1\132\52\0\1\133\43\0"+
    "\1\134\20\0\1\135\37\0\1\136\42\0\1\137\51\0"+
    "\1\140\62\0\1\141\24\0\20\67\1\142\3\67\6\0"+
    "\3\67\1\0\3\67\20\0\1\143\54\0\1\144\42\0"+
    "\1\145\65\0\1\146\22\0\1\147\57\0\1\150\53\0"+
    "\1\151\62\0\1\152\60\0\1\153\10\0\1\154\55\0"+
    "\1\155\45\0\1\156\55\0\1\157\35\0\1\160\54\0"+
    "\1\161\41\0\1\162\52\0\1\163\3\0\1\164\46\0"+
    "\1\165\44\0\1\166\44\0\1\167\56\0\1\170\45\0"+
    "\1\171\43\0\1\172\46\0\1\173\56\0\1\174\45\0"+
    "\1\175\42\0\1\176\56\0\1\177\72\0\1\200\16\0"+
    "\1\201\52\0\1\202\44\0\1\203\52\0\1\204\43\0"+
    "\1\205\100\0\1\206\24\0\1\207\43\0\1\210\61\0"+
    "\1\211\67\0\1\212\16\0\1\213\45\0\1\214\63\0"+
    "\1\215\36\0\1\216\66\0\1\217\33\0\1\220\36\0"+
    "\1\221\56\0\1\222\71\0\1\223\20\0\1\224\1\225"+
    "\1\226\46\0\1\227\44\0\1\230\60\0\1\231\54\0"+
    "\1\232\44\0\1\233\37\0\1\234\47\0\1\235\44\0"+
    "\1\236\53\0\1\237\66\0\1\240\36\0\1\241\35\0"+
    "\1\242\56\0\1\243\42\0\1\244\62\0\1\245\34\0"+
    "\1\246\45\0\1\247\61\0\1\250\40\0\1\251\52\0"+
    "\1\252\57\0\1\253\33\0\1\254\57\0\1\255\40\0"+
    "\1\256\62\0\1\257\65\0\1\260\22\0\1\261\41\0"+
    "\1\262\51\0\1\263\52\0\1\264\41\0\1\265\53\0"+
    "\1\266\42\0\1\267\60\0\1\270\47\0\1\271\103\0"+
    "\1\272\6\0\1\273\61\0\1\274\37\0\1\275\50\0"+
    "\1\276\101\0\1\277\25\0\1\300\45\0\1\301\56\0"+
    "\1\302\37\0\1\303\70\0\1\304\15\0\1\305\55\0"+
    "\1\306\37\0\1\307\47\0\1\310\57\0\1\311\42\0"+
    "\1\312\44\0\1\313\50\0\1\314\56\0\1\315\52\0"+
    "\1\316\40\0\1\317\46\0\1\320\67\0\1\321\34\0"+
    "\1\322\50\0\1\323\36\0\1\324\51\0\1\325\101\0"+
    "\1\326\43\0\1\327\35\0\1\330\33\0\1\331\110\0"+
    "\1\332\27\0\1\333\43\0\1\334\33\0\1\335\53\0"+
    "\1\336\40\0\1\337\56\0\1\340\50\0\1\341\37\0"+
    "\1\342\101\0\1\343\15\0\1\344\52\0\1\345\46\0"+
    "\1\346\1\347\1\350\46\0\1\351\56\0\1\352\42\0"+
    "\1\353\42\0\1\354\47\0\1\355\47\0\1\356\51\0"+
    "\1\357\104\0\1\360\23\0\1\361\65\0\1\362\27\0"+
    "\1\363\56\0\1\364\27\0\1\365\47\0\1\366\55\0"+
    "\1\367\51\0\1\370\41\0\1\371\45\0\1\372\52\0"+
    "\1\373\47\0\1\374\47\0\1\375\61\0\1\376\37\0"+
    "\1\377\45\0\1\u0100\47\0\1\u0101\61\0\1\u0102\45\0"+
    "\1\u0103\47\0\1\u0104\61\0\1\u0105\22\0\1\u0106\114\0"+
    "\1\u0107\15\0\1\u0108\56\0\1\u0109\34\0\1\u010a\46\0"+
    "\1\u010b\64\0\1\u010c\43\0\1\u010d\33\0\1\u010e\52\0"+
    "\1\u010f\42\0\1\u0110\56\0\1\u0111\47\0\1\u0112\44\0"+
    "\1\u0113\52\0\1\u0114\37\0\1\u0115\47\0\1\u0116\55\0"+
    "\1\u0117\41\0\1\u0118\60\0\1\u0119\41\0\1\u011a\57\0"+
    "\1\u011b\56\0\1\u011c\34\0\1\u011d\50\0\1\u011e\47\0"+
    "\1\u011f\44\0\1\u0120\52\0\1\u0121\42\0\1\u0122\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\25\1\1\11\2\1\40\0\1\11\45\0"+
    "\1\11\7\0\1\11\12\0\1\11\20\0\1\11\12\0"+
    "\1\11\10\0\1\11\3\0\1\11\3\0\1\11\4\0"+
    "\1\11\7\0\1\11\3\0\2\11\21\0\2\11\1\0"+
    "\1\11\3\0\1\11\2\0\1\11\4\0\2\11\1\0"+
    "\1\11\10\0\2\11\1\0\1\11\4\0\2\11\4\0"+
    "\2\11\7\0\4\11\5\0\1\11\2\0\4\11\3\0"+
    "\1\11\5\0\2\11\1\0\1\11\3\0\1\11\1\0"+
    "\1\11\3\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 110) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { lexeme = yytext(); return Diferente;
          }
        case 51: break;
        case 8: 
          { lexeme = yytext(); return Igual;
          }
        case 52: break;
        case 32: 
          { lexeme = yytext(); return Potencia;
          }
        case 53: break;
        case 18: 
          { lexeme = yytext(); return String;
          }
        case 54: break;
        case 34: 
          { lexeme = yytext(); return Float;
          }
        case 55: break;
        case 35: 
          { lexeme = yytext(); return While;
          }
        case 56: break;
        case 1: 
          { return Error;
          }
        case 57: break;
        case 3: 
          { lexeme = yytext(); return Negativo;
          }
        case 58: break;
        case 19: 
          { lexeme = yytext(); return Default;
          }
        case 59: break;
        case 15: 
          { lexeme = yytext(); return DosPuntos;
          }
        case 60: break;
        case 2: 
          { lexeme=yytext(); return Linea;
          }
        case 61: break;
        case 12: 
          { lexeme = yytext(); return Break;
          }
        case 62: break;
        case 37: 
          { lexeme = yytext(); return Menor;
          }
        case 63: break;
        case 17: 
          { lexeme = yytext(); return Char;
          }
        case 64: break;
        case 40: 
          { lexeme = yytext(); return MultipleLineC;
          }
        case 65: break;
        case 7: 
          { lexeme = yytext(); return If;
          }
        case 66: break;
        case 30: 
          { lexeme = yytext(); return Conjuncion;
          }
        case 67: break;
        case 4: 
          { lexeme = yytext(); return LiteralCaracter;
          }
        case 68: break;
        case 5: 
          { lexeme = yytext(); return Identificador;
          }
        case 69: break;
        case 29: 
          { lexeme = yytext(); return Suma;
          }
        case 70: break;
        case 42: 
          { lexeme = yytext(); return FinSentencia;
          }
        case 71: break;
        case 25: 
          { lexeme = yytext(); return Integer;
          }
        case 72: break;
        case 43: 
          { lexeme = yytext(); return ParentesisApertura;
          }
        case 73: break;
        case 27: 
          { lexeme = yytext(); return Read;
          }
        case 74: break;
        case 9: 
          { lexeme = yytext(); return Else;
          }
        case 75: break;
        case 39: 
          { lexeme = yytext(); return Case;
          }
        case 76: break;
        case 44: 
          { lexeme = yytext(); return AperturaBloque;
          }
        case 77: break;
        case 24: 
          { lexeme = yytext(); return Switch;
          }
        case 78: break;
        case 23: 
          { lexeme = yytext(); return Decremento;
          }
        case 79: break;
        case 13: 
          { lexeme = yytext(); return Print;
          }
        case 80: break;
        case 50: 
          { lexeme = yytext(); return CorcheteCierre;
          }
        case 81: break;
        case 16: 
          { lexeme = yytext(); return Incremento;
          }
        case 82: break;
        case 20: 
          { lexeme = yytext(); return Bool;
          }
        case 83: break;
        case 10: 
          { lexeme = yytext(); return Division;
          }
        case 84: break;
        case 21: 
          { lexeme = yytext(); return For;
          }
        case 85: break;
        case 22: 
          { lexeme = yytext(); return Disyuncion;
          }
        case 86: break;
        case 6: 
          { lexeme = yytext(); return OneLineC;
          }
        case 87: break;
        case 28: 
          { lexeme = yytext(); return MayorIgual;
          }
        case 88: break;
        case 47: 
          { lexeme = yytext(); return Resta;
          }
        case 89: break;
        case 31: 
          { lexeme = yytext(); return Mayor;
          }
        case 90: break;
        case 49: 
          { lexeme = yytext(); return CierreBloque;
          }
        case 91: break;
        case 14: 
          { lexeme = yytext(); return Modulo;
          }
        case 92: break;
        case 33: 
          { lexeme = yytext(); return Negacion;
          }
        case 93: break;
        case 46: 
          { lexeme = yytext(); return CorcheteApertura;
          }
        case 94: break;
        case 48: 
          { lexeme = yytext(); return ParentesisCierre;
          }
        case 95: break;
        case 45: 
          { lexeme = yytext(); return Multiplicacion;
          }
        case 96: break;
        case 41: 
          { lexeme = yytext(); return MenorIgual;
          }
        case 97: break;
        case 38: 
          { lexeme = yytext(); return LiteralCadena;
          }
        case 98: break;
        case 26: 
          { lexeme = yytext(); return SignoAsignacion;
          }
        case 99: break;
        case 11: 
          { lexeme = yytext(); return Return;
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                lexeme=yytext(); return FinDeArchivo;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
