/* The following code was generated by JFlex 1.4.3 on 15/12/24, 11:28 a.m. */

package code;
import static code.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15/12/24, 11:28 a.m. from the specification file
 * <tt>C:/Users/Priscilla/Desktop/Nuevo proyecto Compi/PP01-Compiladores_E_Interpretes/programa/src/code/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\1\0\1\30\1\41"+
    "\3\0\1\27\2\0\1\43\2\0\1\35\1\42\1\45\12\24\5\0"+
    "\1\44\1\0\32\24\1\0\1\31\2\0\1\23\1\0\1\3\1\4"+
    "\1\7\1\15\1\6\1\17\1\26\1\34\1\14\2\24\1\16\1\20"+
    "\1\11\1\13\1\22\1\25\1\5\1\21\1\12\1\10\1\32\1\36"+
    "\1\37\1\33\1\40\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\26\1\1\4\1\1\40\0"+
    "\1\5\1\0\1\6\45\0\1\7\7\0\1\10\11\0"+
    "\1\11\20\0\1\12\12\0\1\13\7\0\1\14\3\0"+
    "\1\15\3\0\1\16\4\0\1\17\7\0\1\20\3\0"+
    "\1\21\1\22\20\0\1\23\1\24\1\0\1\25\3\0"+
    "\1\26\2\0\1\27\4\0\1\30\1\31\1\0\1\32"+
    "\7\0\1\33\1\34\1\0\1\35\4\0\1\36\1\37"+
    "\4\0\1\40\1\41\6\0\1\42\1\43\1\44\1\45"+
    "\5\0\1\46\2\0\1\47\1\50\1\51\3\0\1\52"+
    "\5\0\1\53\1\54\1\0\1\55\3\0\1\56\1\0"+
    "\1\57\3\0\1\60\1\61\1\0\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\46\0\162\0\230\0\276\0\344"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\46\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e"+
    "\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e"+
    "\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae"+
    "\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de"+
    "\0\u0804\0\u082a\0\u0850\0\u02f8\0\46\0\u031e\0\46\0\u0876"+
    "\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6"+
    "\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6"+
    "\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06"+
    "\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36"+
    "\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\46\0\u0df4\0\u0e1a\0\u0e40"+
    "\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\46\0\u0efe\0\u0f24\0\u0f4a"+
    "\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\46\0\u1054"+
    "\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138\0\u115e\0\u1184"+
    "\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268\0\u128e\0\46"+
    "\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372\0\u1398\0\u13be"+
    "\0\u13e4\0\u140a\0\46\0\u1430\0\u1456\0\u147c\0\u14a2\0\u14c8"+
    "\0\u14ee\0\u1514\0\46\0\u153a\0\u1560\0\u1586\0\46\0\u15ac"+
    "\0\u15d2\0\u15f8\0\46\0\u161e\0\u1644\0\u166a\0\u1690\0\46"+
    "\0\u16b6\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\46"+
    "\0\u17c0\0\u17e6\0\u180c\0\46\0\46\0\u1832\0\u1858\0\u187e"+
    "\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962\0\u1988\0\u19ae"+
    "\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c\0\46\0\46\0\u1a92"+
    "\0\46\0\u1ab8\0\u1ade\0\u1b04\0\46\0\u1b2a\0\u1b50\0\46"+
    "\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8\0\46\0\46\0\u1c0e\0\46"+
    "\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18\0\46"+
    "\0\46\0\u1d3e\0\46\0\u1d64\0\u1d8a\0\u1db0\0\u1dd6\0\46"+
    "\0\46\0\u1dfc\0\u1e22\0\u1e48\0\u1e6e\0\46\0\46\0\u1e94"+
    "\0\u1eba\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52\0\46\0\46\0\46"+
    "\0\46\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea\0\u2010\0\46\0\u2036"+
    "\0\u205c\0\46\0\46\0\46\0\u2082\0\u20a8\0\u20ce\0\46"+
    "\0\u20f4\0\u211a\0\u2140\0\u2166\0\u218c\0\46\0\46\0\u21b2"+
    "\0\46\0\u21d8\0\u21fe\0\u2224\0\46\0\u224a\0\46\0\u2270"+
    "\0\u2296\0\u22bc\0\46\0\46\0\u22e2\0\46\0\46";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\2\1\20"+
    "\1\21\1\22\1\2\1\23\1\2\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\2\1\32\1\33\3\2\1\34"+
    "\4\2\47\0\1\3\50\0\1\35\10\0\1\36\33\0"+
    "\1\37\1\0\1\40\46\0\1\41\4\0\1\42\43\0"+
    "\1\43\4\0\1\44\2\0\1\45\10\0\1\46\23\0"+
    "\1\47\2\0\1\50\1\51\47\0\1\52\3\0\1\53"+
    "\26\0\1\54\7\0\1\55\37\0\1\56\62\0\1\57"+
    "\34\0\1\60\44\0\1\61\51\0\1\62\34\0\1\63"+
    "\2\0\1\64\5\0\1\65\42\0\1\66\2\0\1\67"+
    "\34\0\20\70\1\0\3\70\3\0\3\70\1\0\3\70"+
    "\15\0\1\71\40\0\1\72\1\0\1\73\40\0\27\74"+
    "\1\75\16\74\30\76\1\77\1\100\14\76\23\0\1\101"+
    "\25\0\1\102\45\0\1\103\10\0\1\104\73\0\1\105"+
    "\10\0\1\106\72\0\1\107\31\0\1\110\42\0\1\111"+
    "\65\0\1\112\27\0\1\113\42\0\1\114\17\0\1\115"+
    "\32\0\1\116\35\0\1\117\44\0\1\120\61\0\1\121"+
    "\30\0\1\122\12\0\1\123\33\0\1\124\51\0\1\125"+
    "\36\0\1\126\47\0\1\127\24\0\1\130\22\0\1\131"+
    "\46\0\1\132\43\0\1\133\51\0\1\134\41\0\1\135"+
    "\50\0\1\136\41\0\1\137\20\0\1\140\35\0\1\141"+
    "\40\0\1\142\47\0\1\143\60\0\1\144\22\0\20\70"+
    "\1\145\3\70\3\0\3\70\1\0\3\70\21\0\1\146"+
    "\52\0\1\147\40\0\1\150\31\0\2\76\1\0\43\76"+
    "\42\0\1\151\10\0\1\152\55\0\1\153\51\0\1\154"+
    "\67\0\1\155\10\0\1\156\53\0\1\157\43\0\1\160"+
    "\53\0\1\161\33\0\1\162\52\0\1\163\37\0\1\164"+
    "\50\0\1\165\3\0\1\166\44\0\1\167\42\0\1\170"+
    "\42\0\1\171\54\0\1\172\43\0\1\173\41\0\1\174"+
    "\44\0\1\175\54\0\1\176\43\0\1\177\40\0\1\200"+
    "\54\0\1\201\65\0\1\202\17\0\1\203\50\0\1\204"+
    "\42\0\1\205\50\0\1\206\41\0\1\207\73\0\1\210"+
    "\25\0\1\211\41\0\1\212\57\0\1\213\62\0\1\214"+
    "\17\0\1\215\43\0\1\216\61\0\1\217\34\0\1\220"+
    "\77\0\1\221\16\0\1\222\34\0\1\223\54\0\1\224"+
    "\40\0\1\225\1\226\1\227\44\0\1\230\42\0\1\231"+
    "\56\0\1\232\52\0\1\233\42\0\1\234\35\0\1\235"+
    "\45\0\1\236\42\0\1\237\51\0\1\240\64\0\1\241"+
    "\34\0\1\242\33\0\1\243\54\0\1\244\40\0\1\245"+
    "\60\0\1\246\32\0\1\247\43\0\1\250\57\0\1\251"+
    "\36\0\1\252\50\0\1\253\55\0\1\254\31\0\1\255"+
    "\55\0\1\256\36\0\1\257\60\0\1\260\60\0\1\261"+
    "\23\0\1\262\37\0\1\263\47\0\1\264\50\0\1\265"+
    "\37\0\1\266\51\0\1\267\102\0\1\270\14\0\1\271"+
    "\45\0\1\272\40\0\1\273\57\0\1\274\35\0\1\275"+
    "\46\0\1\276\74\0\1\277\26\0\1\300\43\0\1\301"+
    "\54\0\1\302\35\0\1\303\63\0\1\304\16\0\1\305"+
    "\53\0\1\306\35\0\1\307\45\0\1\310\55\0\1\311"+
    "\40\0\1\312\42\0\1\313\46\0\1\314\54\0\1\315"+
    "\50\0\1\316\36\0\1\317\44\0\1\320\65\0\1\321"+
    "\32\0\1\322\46\0\1\323\34\0\1\324\47\0\1\325"+
    "\74\0\1\326\42\0\1\327\35\0\1\330\31\0\1\331"+
    "\66\0\1\332\41\0\1\333\31\0\1\334\51\0\1\335"+
    "\36\0\1\336\54\0\1\337\46\0\1\340\35\0\1\341"+
    "\74\0\1\342\16\0\1\343\50\0\1\344\44\0\1\345"+
    "\1\346\1\347\44\0\1\350\54\0\1\351\40\0\1\352"+
    "\40\0\1\353\45\0\1\354\45\0\1\355\47\0\1\356"+
    "\77\0\1\357\24\0\1\360\52\0\1\361\36\0\1\362"+
    "\34\0\1\363\45\0\1\364\53\0\1\365\47\0\1\366"+
    "\37\0\1\367\43\0\1\370\50\0\1\371\45\0\1\372"+
    "\45\0\1\373\57\0\1\374\35\0\1\375\43\0\1\376"+
    "\45\0\1\377\57\0\1\u0100\43\0\1\u0101\45\0\1\u0102"+
    "\74\0\1\u0103\3\0\1\u0104\60\0\1\u0105\54\0\1\u0106"+
    "\32\0\1\u0107\44\0\1\u0108\62\0\1\u0109\41\0\1\u010a"+
    "\31\0\1\u010b\50\0\1\u010c\40\0\1\u010d\54\0\1\u010e"+
    "\45\0\1\u010f\42\0\1\u0110\50\0\1\u0111\35\0\1\u0112"+
    "\45\0\1\u0113\53\0\1\u0114\37\0\1\u0115\56\0\1\u0116"+
    "\37\0\1\u0117\55\0\1\u0118\54\0\1\u0119\32\0\1\u011a"+
    "\46\0\1\u011b\45\0\1\u011c\42\0\1\u011d\50\0\1\u011e"+
    "\40\0\1\u011f\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8968];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\26\1\1\11\1\1\40\0"+
    "\1\11\1\0\1\11\45\0\1\11\7\0\1\11\11\0"+
    "\1\11\20\0\1\11\12\0\1\11\7\0\1\11\3\0"+
    "\1\11\3\0\1\11\4\0\1\11\7\0\1\11\3\0"+
    "\2\11\20\0\2\11\1\0\1\11\3\0\1\11\2\0"+
    "\1\11\4\0\2\11\1\0\1\11\7\0\2\11\1\0"+
    "\1\11\4\0\2\11\4\0\2\11\6\0\4\11\5\0"+
    "\1\11\2\0\3\11\3\0\1\11\5\0\2\11\1\0"+
    "\1\11\3\0\1\11\1\0\1\11\3\0\2\11\1\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 108) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { lexeme = yytext(); return Diferente;
          }
        case 52: break;
        case 10: 
          { lexeme = yytext(); return Igual;
          }
        case 53: break;
        case 36: 
          { lexeme = yytext(); return Float;
          }
        case 54: break;
        case 34: 
          { lexeme = yytext(); return Potencia;
          }
        case 55: break;
        case 20: 
          { lexeme = yytext(); return String;
          }
        case 56: break;
        case 37: 
          { lexeme = yytext(); return While;
          }
        case 57: break;
        case 1: 
          { return Error;
          }
        case 58: break;
        case 4: 
          { lexeme = yytext(); return Negativo;
          }
        case 59: break;
        case 21: 
          { lexeme = yytext(); return Default;
          }
        case 60: break;
        case 17: 
          { lexeme = yytext(); return DosPuntos;
          }
        case 61: break;
        case 3: 
          { lexeme=yytext(); return Linea;
          }
        case 62: break;
        case 14: 
          { lexeme = yytext(); return Break;
          }
        case 63: break;
        case 39: 
          { lexeme = yytext(); return Menor;
          }
        case 64: break;
        case 19: 
          { lexeme = yytext(); return Char;
          }
        case 65: break;
        case 40: 
          { lexeme = yytext(); return MultipleLineC;
          }
        case 66: break;
        case 9: 
          { lexeme = yytext(); return If;
          }
        case 67: break;
        case 32: 
          { lexeme = yytext(); return Conjuncion;
          }
        case 68: break;
        case 5: 
          { lexeme = yytext(); return LiteralCaracter;
          }
        case 69: break;
        case 7: 
          { lexeme = yytext(); return Identificador;
          }
        case 70: break;
        case 31: 
          { lexeme = yytext(); return Suma;
          }
        case 71: break;
        case 43: 
          { lexeme = yytext(); return FinSentencia;
          }
        case 72: break;
        case 27: 
          { lexeme = yytext(); return Integer;
          }
        case 73: break;
        case 44: 
          { lexeme = yytext(); return ParentesisApertura;
          }
        case 74: break;
        case 29: 
          { lexeme = yytext(); return Read;
          }
        case 75: break;
        case 11: 
          { lexeme = yytext(); return Else;
          }
        case 76: break;
        case 41: 
          { lexeme = yytext(); return Case;
          }
        case 77: break;
        case 45: 
          { lexeme = yytext(); return AperturaBloque;
          }
        case 78: break;
        case 26: 
          { lexeme = yytext(); return Switch;
          }
        case 79: break;
        case 25: 
          { lexeme = yytext(); return Decremento;
          }
        case 80: break;
        case 15: 
          { lexeme = yytext(); return Print;
          }
        case 81: break;
        case 51: 
          { lexeme = yytext(); return CorcheteCierre;
          }
        case 82: break;
        case 18: 
          { lexeme = yytext(); return Incremento;
          }
        case 83: break;
        case 22: 
          { lexeme = yytext(); return Bool;
          }
        case 84: break;
        case 2: 
          { lexeme=yytext(); return EspacioEnBlanco;
          }
        case 85: break;
        case 12: 
          { lexeme = yytext(); return Division;
          }
        case 86: break;
        case 23: 
          { lexeme = yytext(); return For;
          }
        case 87: break;
        case 24: 
          { lexeme = yytext(); return Disyuncion;
          }
        case 88: break;
        case 8: 
          { lexeme = yytext(); return OneLineC;
          }
        case 89: break;
        case 30: 
          { lexeme = yytext(); return MayorIgual;
          }
        case 90: break;
        case 48: 
          { lexeme = yytext(); return Resta;
          }
        case 91: break;
        case 33: 
          { lexeme = yytext(); return Mayor;
          }
        case 92: break;
        case 50: 
          { lexeme = yytext(); return CierreBloque;
          }
        case 93: break;
        case 16: 
          { lexeme = yytext(); return Modulo;
          }
        case 94: break;
        case 35: 
          { lexeme = yytext(); return Negacion;
          }
        case 95: break;
        case 47: 
          { lexeme = yytext(); return CorcheteApertura;
          }
        case 96: break;
        case 49: 
          { lexeme = yytext(); return ParentesisCierre;
          }
        case 97: break;
        case 46: 
          { lexeme = yytext(); return Multiplicacion;
          }
        case 98: break;
        case 42: 
          { lexeme = yytext(); return MenorIgual;
          }
        case 99: break;
        case 6: 
          { lexeme = yytext(); return LiteralCadena;
          }
        case 100: break;
        case 28: 
          { lexeme = yytext(); return SignoAsignacion;
          }
        case 101: break;
        case 13: 
          { lexeme = yytext(); return Return;
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                lexeme=yytext(); return FinDeArchivo;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
